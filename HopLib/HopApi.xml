<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HopLib</name>
    </assembly>
    <members>
        <member name="T:HopLib.HopApi">
            <summary>The main Hop API.</summary>
            <remarks>
            The Hop API's purpose is to help modders.
            It will eventually have events and utilities for commonly required things.
            Currently it is under heavy development, so expect breaking changes even with minor revisions before the 1.0.0 release
            </remarks>
            <example><code>
            using HopLib;
            HopApi.PlayerAdded += (object sender, PlayerEventArgs ev) => {
              Logger.LogInfo($"Player {ev.Player.Username} added.");
            };
            </code></example>
        </member>
        <member name="E:HopLib.HopApi.LateInit">
            <summary>Invoked only once, sometime after the game and HopLib have intialized their data.</summary>
        </member>
        <member name="E:HopLib.HopApi.AvatarLoaded">
            <summary>Invoked when an user's avatar has been loaded.</summary>
        </member>
        <member name="P:HopLib.HopApi.CurrentInstanceId">
            <summary>The current instance's ID.</summary>
            <remarks>If you only need this on instance change, prefer using <see cref="E:HopLib.HopApi.InstanceJoined" />.</remarks>
        </member>
        <member name="E:HopLib.HopApi.InstanceJoiningStarted">
            <summary>Invoked when the local player has started the process of joining another instance. One of the only reliable ways to retrieve the instance ID.</summary>
        </member>
        <member name="E:HopLib.HopApi.InstanceJoined">
            <summary>Invoked when the local player has joined a new instance, but the world is probably not loaded fully yet.</summary>
        </member>
        <member name="E:HopLib.HopApi.InstanceDisconnect">
            <summary>Invoked when the local player has disconnected from the game network.</summary>
        </member>
        <member name="E:HopLib.HopApi.PlayerAdded">
            <summary>Invoked when a remote player has been added (when for example loading in or they connected).</summary>
        </member>
        <member name="E:HopLib.HopApi.PlayerRemoved">
            <summary>Invoked when a remote player has been removed (when for example they disconnected).</summary>
        </member>
        <member name="E:HopLib.HopApi.PortalLoaded">
            <summary>Invoked when a portal has been loaded.</summary>
        </member>
        <member name="E:HopLib.HopApi.PropLoaded">
            <summary>Invoked when a prop has been loaded.</summary>
            <remarks>Not invoked for blocked props.</remarks>
        </member>
        <member name="E:HopLib.HopApi.UIEventsRegistered">
            <summary>The moment when UI injections should happen.</summary>
        </member>
        <member name="P:HopLib.HopApi.CurrentWorld">
            <summary>The current world.</summary>
        </member>
        <member name="E:HopLib.HopApi.WorldStarted">
            <summary>Invoked when a world has been loaded.</summary>
        </member>
        <member name="T:HopLib.AvatarEventArgs">
            <summary>Arguments for an avatar related event.</summary>
            <remarks>Used for example in <see cref="E:HopLib.HopApi.AvatarLoaded" />.</remarks>
        </member>
        <member name="F:HopLib.AvatarEventArgs.Avatar">
            <summary>The avatar that the event relates to.</summary>
        </member>
        <member name="F:HopLib.AvatarEventArgs.Target">
            <summary>The player that the event is related to, null for local player.</summary>
        </member>
        <member name="P:HopLib.AvatarEventArgs.IsLocal">
            <summary>If the target is the local player.</summary>
        </member>
        <member name="T:HopLib.InstanceEventArgs">
            <summary>Arguments for an instance related event.</summary>
            <remarks>Used for example in <see cref="E:HopLib.HopApi.InstanceJoined" />.</remarks>
        </member>
        <member name="F:HopLib.InstanceEventArgs.InstanceId">
            <summary>The instance's ID that this event relates to.</summary>
        </member>
        <member name="T:HopLib.PlayerEventArgs">
            <summary>Arguments for a player related event.</summary>
            <remarks>
            Used for example in <see cref="E:HopLib.HopApi.PlayerAdded" />.
            If you want to access the player's avatar, you should instead use <see cref="E:HopLib.HopApi.AvatarLoaded" />.
            Please note that this value might be copied via reflections to avoid the game recycling it, so some methods may not behave correctly.
            </remarks>
        </member>
        <member name="F:HopLib.PlayerEventArgs.Player">
            <summary>The player that the event relates to.</summary>
        </member>
        <member name="T:HopLib.PlayerIdEventArgs">
            <summary>Arguments for a player related event but with only the ID of the player.</summary>
            <remarks>Used for example in <see cref="E:HopLib.HopApi.PlayerRemoved" />.</remarks>
        </member>
        <member name="F:HopLib.PlayerIdEventArgs.PlayerId">
            <summary>The ID of the player that the event relates to.</summary>
        </member>
        <member name="T:HopLib.PortalEventArgs">
            <summary>Arguments for a portal related event.</summary>
            <remarks>Used for example in <see cref="E:HopLib.HopApi.PortalLoaded" />.</remarks>
        </member>
        <member name="F:HopLib.PortalEventArgs.Portal">
            <summary>The avatar that the event relates to.</summary>
        </member>
        <member name="T:HopLib.PropEventArgs">
            <summary>Arguments for a prop related event.</summary>
            <remarks>Used for example in <see cref="E:HopLib.HopApi.PropLoaded" />.</remarks>
        </member>
        <member name="F:HopLib.PropEventArgs.Prop">
            <summary>The prop that the event relates to.</summary>
        </member>
        <member name="T:HopLib.InjectUiEventArgs">
            <summary>Arguments to an UI event.</summary>
            <remarks>Used for example in <see cref="E:HopLib.HopApi.UIEventsRegistered" />.</remarks>
        </member>
        <member name="F:HopLib.InjectUiEventArgs.Manager">
            <summary>The ID of the player that the event relates to.</summary>
        </member>
        <member name="T:HopLib.WorldEventArgs">
            <summary>Arguments for a world related event.</summary>
            <remarks>Used for example in <see cref="E:HopLib.HopApi.WorldStarted" />.</remarks>
        </member>
        <member name="F:HopLib.WorldEventArgs.World">
            <summary>The world that the event relates to.</summary>
        </member>
        <member name="T:HopLib.Extras.AllowingKeyboardShortcut">
            <summary>
            `KeyboardShortcut` but allows other keys to be pressed at the same time.
            </summary>
        </member>
        <member name="M:HopLib.Extras.AllowingKeyboardShortcut.AllowingIsDown(HopLib.Extras.KeyboardShortcut)">
            <summary>
            Check if the main key was just pressed (Input.GetKeyDown), and specified modifier keys are all pressed, while also allowing other keys to be pressed.
            </summary>
        </member>
        <member name="M:HopLib.Extras.AllowingKeyboardShortcut.AllowingIsPressed(HopLib.Extras.KeyboardShortcut)">
            <summary>
            Check if the main key is currently held down (Input.GetKey), and specified modifier keys are all pressed, while also allowing other keys to be pressed.
            </summary>
        </member>
        <member name="M:HopLib.Extras.AllowingKeyboardShortcut.AllowingIsUp(HopLib.Extras.KeyboardShortcut)">
            <summary>
            Check if the main key was just lifted (Input.GetKeyUp), and specified modifier keys are all pressed, while also allowing other keys to be pressed.
            </summary>
        </member>
        <member name="T:HopLib.HopLibInfo">
            <summary>Info about the current HopLib.</summary>
        </member>
        <member name="F:HopLib.HopLibInfo.Id">
            <summary>The plugin's constant GUID.</summary>
        </member>
        <member name="F:HopLib.HopLibInfo.Version">
            <summary>The current version of HopLib.</summary>
        </member>
    </members>
</doc>
